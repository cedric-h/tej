import { wrapper } from "./engine.js"

export function test(wasm) {
  const { setLegend, setSolids, setPushables, setMap, getFirst, onInput, afterInput, match, allOf } = wrapper(wasm);

  setLegend({
    'b': "0",
    'p': `
      ................
      ................
      .......0000.....
      .......04440....
      ......0444440...
      ......0444.43...
      ......04444433..
      .......044440...
      ..00000444440...
      ..04444444440...
      ..04444444440...
      ...044444440....
      ....04444400....
      .....00000......
      ......00.00.....
      ................
    `,
    '#': `
      ................
      ................
      ................
      ......33333.....
      .....3333333....
      ....333333333...
      ....333333333...
      ....333333333...
      ....333333333...
      ....333333333...
      ....333333333...
      .....3333333....
      ......33333.....
      ................
      ................
      ................
    `,
    'g': `
      ................
      ................
      ................
      ......44444.....
      .....4444444....
      ....444444444...
      ....444444444...
      ....444444444...
      ....444444444...
      ....444444444...
      ....444444444...
      .....4444444....
      ......44444.....
      ................
      ................
      ................
    `,
    'w': allOf("g", "#")
  });

  setSolids(["p", "b", "#"]);
  // setZOrder(["d", "b","g", "r"]);
  setPushables({ "p": ["#"] });

  let level = 0;
  const levels = [
    `
    bbbbbbbbbb
    bp.b.....b
    b..b.....b
    b..b.#b..b
    b.....b.gb
    bbbbbbbbbb
    `,
    `
    bbbbbbbbbb
    bp......gb
    b....b...b
    b.b#bg.#.b
    b......b.b
    bbbbbbbbbb
    `,
    `
    bbbbbbbbbb
    b........b
    b........b
    b........b
    b........b
    bbbbbbbbbb
    `
  ];

  setMap(levels[level]);

  onInput("up",      _ => getFirst("p").y += 1);
  onInput("down",    _ => getFirst("p").y -= 1);
  onInput("left",    _ => getFirst("p").x += 1);
  onInput("right",   _ => getFirst("p").x -= 1);
  afterInput(_ => {
    if (match("w").length == match("g").length)
      setMap(levels[++level]);
  });
}
